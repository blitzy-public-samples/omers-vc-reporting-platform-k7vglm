name: Backend Continuous Deployment

on:
  workflow_run:
    workflows: ["Backend CI"]
    branches: [main]
    types: 
      - completed

env:
  ACR_REGISTRY: myacr.azurecr.io
  BACKEND_IMAGE: backend
  RESOURCE_GROUP: myResourceGroup
  STAGING_APP_NAME: backend-staging
  PRODUCTION_APP_NAME: backend-production

jobs:
  deploy_to_staging:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push image to ACR
        uses: docker/build-push-action@v4
        with:
          context: src/backend
          push: true
          tags: ${{ env.ACR_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.ACR_REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
          cache-to: type=inline

      - name: Deploy to Azure Web App (Staging)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.STAGING_APP_NAME }}
          images: ${{ env.ACR_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

      - name: Run database migrations
        run: |
          az webapp ssh --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.STAGING_APP_NAME }} --command "cd /home/site/wwwroot && alembic upgrade head"

      - name: Run post-deployment health check
        run: |
          response=$(curl -sS -o /dev/null -w "%{http_code}" https://${{ env.STAGING_APP_NAME }}.azurewebsites.net/health)
          if [ $response != "200" ]; then
            echo "Health check failed with status code: $response"
            exit 1
          fi

  deploy_to_production:
    needs: deploy_to_staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init -backend-config=environments/prod.tfvars
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Plan
        run: |
          cd infrastructure
          terraform plan -var-file=environments/prod.tfvars -out=tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Terraform Apply
        run: |
          cd infrastructure
          terraform apply -auto-approve tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Deploy to Azure Web App (Production)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.PRODUCTION_APP_NAME }}
          images: ${{ env.ACR_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

      - name: Run database migrations
        run: |
          az webapp ssh --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.PRODUCTION_APP_NAME }} --command "cd /home/site/wwwroot && alembic upgrade head"

      - name: Run post-deployment health check
        run: |
          response=$(curl -sS -o /dev/null -w "%{http_code}" https://${{ env.PRODUCTION_APP_NAME }}.azurewebsites.net/health)
          if [ $response != "200" ]; then
            echo "Health check failed with status code: $response"
            exit 1
          fi

# Environment variables used in this workflow:
# AZURE_CREDENTIALS: Azure service principal credentials for authentication (secret)
# ACR_USERNAME: Azure Container Registry username (secret)
# ACR_PASSWORD: Azure Container Registry password (secret)
# AZURE_CLIENT_ID: Azure service principal client ID (secret)
# AZURE_CLIENT_SECRET: Azure service principal client secret (secret)
# AZURE_SUBSCRIPTION_ID: Azure subscription ID (secret)
# AZURE_TENANT_ID: Azure tenant ID (secret)
# DB_PASSWORD: Database password for Terraform deployment (secret)

# Security considerations:
# - Uses GitHub Secrets for storing sensitive information
# - Separates staging and production deployments
# - Uses Terraform to manage infrastructure, ensuring consistency and version control
# - Implements least privilege principle by using separate service principals for different operations

# Best practices implemented:
# - Triggers CD workflow only after successful completion of CI workflow
# - Uses specific versions for GitHub Actions to ensure consistency
# - Implements a staging environment for pre-production testing
# - Requires manual approval for production deployments using GitHub Environments
# - Uses Terraform for infrastructure management to ensure consistency across environments
# - Runs database migrations as part of the deployment process
# - Uses Azure Container Registry for storing and managing container images
# - Implements post-deployment health checks
# - Uses caching for Docker builds to speed up the process
# - Separates Terraform plan and apply steps for better control and review

# Notes:
# - This workflow is triggered only when the CI workflow completes successfully on the main branch
# - The workflow uses the Dockerfile in src/backend for building the container image
# - Terraform is used to manage the production infrastructure, allowing for version-controlled infrastructure changes
# - Consider implementing a rollback mechanism in case of deployment failures
# - Ensure that the /health endpoint is implemented in the backend application
# - Consider adding more comprehensive post-deployment tests (e.g., integration tests, smoke tests)
# - Implement proper logging and monitoring for the CD process